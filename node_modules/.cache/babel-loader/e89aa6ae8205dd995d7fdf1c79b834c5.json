{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nconst defaultInitialState = {\n  stat: \"idle\",\n  data: null,\n  error: null\n};\nexport const useAsync = initialState => {\n  _s();\n\n  const [state, setState] = useState({ ...defaultInitialState,\n    ...initialState\n  });\n\n  const setData = data => setState({\n    data,\n    stat: \"success\",\n    error: null\n  });\n\n  const setError = error => setState({\n    error,\n    stat: \"error\",\n    data: null\n  }); // run 用来触发异步请求\n\n\n  const run = promise => {\n    if (!promise || !promise.then) {\n      throw new Error(\"请传入 promise类型数据\");\n    }\n\n    setState({ ...state,\n      stat: \"loading\"\n    });\n    return promise.then(data => {\n      setData(data);\n      return data;\n    }).catch(error => {\n      setError(error);\n      return error;\n    });\n  };\n\n  return {\n    isIdle: state.stat === \"idle\",\n    isLoading: state.stat === \"loading\",\n    isError: state.stat === \"error\",\n    isSuccess: state.stat === \"success\",\n    run,\n    setData,\n    setError,\n    ...state\n  };\n};\n\n_s(useAsync, \"Ilr32uHAMrJylRxPQP9NAOyJuBU=\");","map":{"version":3,"sources":["/Users/liuyang/Documents/yideng/jira/src/utils/use-async.ts"],"names":["useState","defaultInitialState","stat","data","error","useAsync","initialState","state","setState","setData","setError","run","promise","then","Error","catch","isIdle","isLoading","isError","isSuccess"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAQA,MAAMC,mBAAgC,GAAG;AACvCC,EAAAA,IAAI,EAAE,MADiC;AAEvCC,EAAAA,IAAI,EAAE,IAFiC;AAGvCC,EAAAA,KAAK,EAAE;AAHgC,CAAzC;AAMA,OAAO,MAAMC,QAAQ,GAAOC,YAAJ,IAAgC;AAAA;;AACtD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAW,EAC3C,GAAGC,mBADwC;AAE3C,OAAGK;AAFwC,GAAX,CAAlC;;AAKA,QAAMG,OAAO,GAAIN,IAAD,IACdK,QAAQ,CAAC;AACPL,IAAAA,IADO;AAEPD,IAAAA,IAAI,EAAE,SAFC;AAGPE,IAAAA,KAAK,EAAE;AAHA,GAAD,CADV;;AAOA,QAAMM,QAAQ,GAAIN,KAAD,IACfI,QAAQ,CAAC;AACPJ,IAAAA,KADO;AAEPF,IAAAA,IAAI,EAAE,OAFC;AAGPC,IAAAA,IAAI,EAAE;AAHC,GAAD,CADV,CAbsD,CAmBtD;;;AACA,QAAMQ,GAAG,GAAIC,OAAD,IAAyB;AACnC,QAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,IAAzB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACDN,IAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYL,MAAAA,IAAI,EAAE;AAAlB,KAAD,CAAR;AACA,WAAOU,OAAO,CACXC,IADI,CACEV,IAAD,IAAU;AACdM,MAAAA,OAAO,CAACN,IAAD,CAAP;AACA,aAAOA,IAAP;AACD,KAJI,EAKJY,KALI,CAKGX,KAAD,IAAW;AAChBM,MAAAA,QAAQ,CAACN,KAAD,CAAR;AACA,aAAOA,KAAP;AACD,KARI,CAAP;AASD,GAdD;;AAgBA,SAAO;AACLY,IAAAA,MAAM,EAAET,KAAK,CAACL,IAAN,KAAe,MADlB;AAELe,IAAAA,SAAS,EAAEV,KAAK,CAACL,IAAN,KAAe,SAFrB;AAGLgB,IAAAA,OAAO,EAAEX,KAAK,CAACL,IAAN,KAAe,OAHnB;AAILiB,IAAAA,SAAS,EAAEZ,KAAK,CAACL,IAAN,KAAe,SAJrB;AAKLS,IAAAA,GALK;AAMLF,IAAAA,OANK;AAOLC,IAAAA,QAPK;AAQL,OAAGH;AARE,GAAP;AAUD,CA9CM;;GAAMF,Q","sourcesContent":["import { useState } from \"react\";\n\ninterface State<D> {\n  error: Error | null;\n  data: D | null;\n  stat: \"idle\" | \"loading\" | \"error\" | \"success\";\n}\n\nconst defaultInitialState: State<null> = {\n  stat: \"idle\",\n  data: null,\n  error: null,\n};\n\nexport const useAsync = <D>(initialState?: State<D>) => {\n  const [state, setState] = useState<State<D>>({\n    ...defaultInitialState,\n    ...initialState,\n  });\n\n  const setData = (data: D) =>\n    setState({\n      data,\n      stat: \"success\",\n      error: null,\n    });\n\n  const setError = (error: Error) =>\n    setState({\n      error,\n      stat: \"error\",\n      data: null,\n    });\n  // run 用来触发异步请求\n  const run = (promise: Promise<D>) => {\n    if (!promise || !promise.then) {\n      throw new Error(\"请传入 promise类型数据\");\n    }\n    setState({ ...state, stat: \"loading\" });\n    return promise\n      .then((data) => {\n        setData(data);\n        return data;\n      })\n      .catch((error) => {\n        setError(error);\n        return error;\n      });\n  };\n\n  return {\n    isIdle: state.stat === \"idle\",\n    isLoading: state.stat === \"loading\",\n    isError: state.stat === \"error\",\n    isSuccess: state.stat === \"success\",\n    run,\n    setData,\n    setError, \n    ...state\n  }\n};\n"]},"metadata":{},"sourceType":"module"}