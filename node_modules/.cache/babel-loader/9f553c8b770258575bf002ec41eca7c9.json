{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\"; // import {Project} from 'screens/project-list/list'\n\nexport const isFalsy = value => value === 0 ? false : !value; // 不改变函数本身\n\nexport const cleanObject = object => {\n  const result = { ...object\n  };\n  Object.keys(result).forEach(key => {\n    const value = result[key];\n\n    if (isFalsy(value)) {\n      delete result[key];\n    }\n  });\n  return result;\n};\nexport const useMount = callback => {\n  _s();\n\n  useEffect(() => {\n    callback();\n  }, []);\n};\n\n_s(useMount, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport const useDebounce = (value, delay) => {\n  _s2();\n\n  const [debouncedValue, setdebouncedValue] = useState(value);\n  useEffect(() => {\n    const timeout = setTimeout(() => setdebouncedValue(value), delay); // 每次在上一次useEffect处理完以后再运行\n\n    return () => clearTimeout(timeout);\n  }, [value, delay]);\n  return debouncedValue;\n};\n\n_s2(useDebounce, \"xLyuMaXockJZHdnJ+VkLCK0VOJQ=\");\n\nexport const useArray = initialArray => {\n  _s3();\n\n  const [value, setValue] = useState(initialArray);\n  return {\n    value,\n    setValue,\n    add: item => setValue([...value, item]),\n    clear: () => setValue([]),\n    removeIndex: index => {\n      const copy = [...value];\n      copy.splice(index, 1);\n      setValue(copy);\n    }\n  };\n};\n\n_s3(useArray, \"Jp3HZfD2I5cSi0kXTMXqGWzVs8E=\");","map":{"version":3,"sources":["/Users/liuyang/Documents/yideng/jira/src/utils/index.ts"],"names":["useEffect","useState","isFalsy","value","cleanObject","object","result","Object","keys","forEach","key","useMount","callback","useDebounce","delay","debouncedValue","setdebouncedValue","timeout","setTimeout","clearTimeout","useArray","initialArray","setValue","add","item","clear","removeIndex","index","copy","splice"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CACA;;AAEA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAA0BA,KAAK,KAAK,CAAV,GAAc,KAAd,GAAsB,CAACA,KAAjE,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAIC,MAAD,IAA6B;AACtD,QAAMC,MAAM,GAAG,EAAE,GAAGD;AAAL,GAAf;AACAE,EAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA6BC,GAAD,IAAS;AACjC,UAAMP,KAAK,GAAGG,MAAM,CAACI,GAAD,CAApB;;AACA,QAAGR,OAAO,CAACC,KAAD,CAAV,EAAmB;AACf,aAAOG,MAAM,CAACI,GAAD,CAAb;AACH;AACJ,GALD;AAMA,SAAOJ,MAAP;AACD,CATM;AAWP,OAAO,MAAMK,QAAQ,GAAIC,QAAD,IAA0B;AAAA;;AAChDZ,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAGD,CAJM;;GAAMD,Q;;AAMb,OAAO,MAAME,WAAW,GAAG,CAAIV,KAAJ,EAAcW,KAAd,KAAiC;AAAA;;AAC1D,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAACE,KAAD,CAApD;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,OAAO,GAAGC,UAAU,CAAC,MAAMF,iBAAiB,CAACb,KAAD,CAAxB,EAAiCW,KAAjC,CAA1B,CADc,CAEd;;AACA,WAAO,MAAMK,YAAY,CAACF,OAAD,CAAzB;AACD,GAJQ,EAIN,CAACd,KAAD,EAAQW,KAAR,CAJM,CAAT;AAKA,SAAOC,cAAP;AACD,CATM;;IAAMF,W;;AAWb,OAAO,MAAMO,QAAQ,GAAOC,YAAJ,IAA0B;AAAA;;AAChD,QAAM,CAAClB,KAAD,EAAQmB,QAAR,IAAoBrB,QAAQ,CAACoB,YAAD,CAAlC;AACA,SAAO;AACLlB,IAAAA,KADK;AAELmB,IAAAA,QAFK;AAGLC,IAAAA,GAAG,EAAGC,IAAD,IAAaF,QAAQ,CAAC,CAAC,GAAGnB,KAAJ,EAAWqB,IAAX,CAAD,CAHrB;AAILC,IAAAA,KAAK,EAAE,MAAMH,QAAQ,CAAC,EAAD,CAJhB;AAKLI,IAAAA,WAAW,EAAGC,KAAD,IAAmB;AAC9B,YAAMC,IAAI,GAAG,CAAC,GAAGzB,KAAJ,CAAb;AACAyB,MAAAA,IAAI,CAACC,MAAL,CAAYF,KAAZ,EAAmB,CAAnB;AACAL,MAAAA,QAAQ,CAACM,IAAD,CAAR;AACD;AATI,GAAP;AAWD,CAbM;;IAAMR,Q","sourcesContent":["import { useEffect, useState } from \"react\";\n// import {Project} from 'screens/project-list/list'\n\nexport const isFalsy = (value: any): boolean => (value === 0 ? false : !value);\n\n// 不改变函数本身\nexport const cleanObject = (object: {[key: string]}) => {\n  const result = { ...object };\n  Object.keys(result).forEach((key) => {\n      const value = result[key]\n      if(isFalsy(value)) {\n          delete result[key]\n      }\n  })\n  return result;\n};\n\nexport const useMount = (callback: () => void) => {\n  useEffect(() => {\n    callback();\n  }, []);\n};\n\nexport const useDebounce = <V>(value: V, delay?: number) => {\n  const [debouncedValue, setdebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => setdebouncedValue(value), delay);\n    // 每次在上一次useEffect处理完以后再运行\n    return () => clearTimeout(timeout);\n  }, [value, delay]);\n  return debouncedValue;\n};\n\nexport const useArray = <T>(initialArray: T[]) => {\n  const [value, setValue] = useState(initialArray);\n  return {\n    value,\n    setValue,\n    add: (item: T) => setValue([...value, item]),\n    clear: () => setValue([]),\n    removeIndex: (index: number) => {\n      const copy = [...value];\n      copy.splice(index, 1);\n      setValue(copy);\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}