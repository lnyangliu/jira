{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useMemoCallback;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n/**\n * Cache callback function that always return same ref instead.\n * This is used for context optimization.\n */\n\n\nfunction useMemoCallback(func) {\n  var funRef = React.useRef(func);\n  funRef.current = func;\n  var callback = React.useCallback(function () {\n    var _funRef$current;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [funRef].concat(args));\n  }, []);\n  return func ? callback : undefined;\n}","map":{"version":3,"sources":["/Users/liuyang/Documents/yideng/jira/node_modules/rc-menu/lib/hooks/useMemoCallback.js"],"names":["_interopRequireWildcard","require","Object","defineProperty","exports","value","default","useMemoCallback","React","func","funRef","useRef","current","callback","useCallback","_funRef$current","_len","arguments","length","args","Array","_key","call","apply","concat","undefined"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,eAAlB;;AAEA,IAAIC,KAAK,GAAGR,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;AAEA;AACA;AACA;AACA;;;AACA,SAASM,eAAT,CAAyBE,IAAzB,EAA+B;AAC7B,MAAIC,MAAM,GAAGF,KAAK,CAACG,MAAN,CAAaF,IAAb,CAAb;AACAC,EAAAA,MAAM,CAACE,OAAP,GAAiBH,IAAjB;AACA,MAAII,QAAQ,GAAGL,KAAK,CAACM,WAAN,CAAkB,YAAY;AAC3C,QAAIC,eAAJ;;AAEA,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,WAAO,CAACN,eAAe,GAAGL,MAAM,CAACE,OAA1B,MAAuC,IAAvC,IAA+CG,eAAe,KAAK,KAAK,CAAxE,GAA4E,KAAK,CAAjF,GAAqFA,eAAe,CAACO,IAAhB,CAAqBC,KAArB,CAA2BR,eAA3B,EAA4C,CAACL,MAAD,EAASc,MAAT,CAAgBL,IAAhB,CAA5C,CAA5F;AACD,GARc,EAQZ,EARY,CAAf;AASA,SAAOV,IAAI,GAAGI,QAAH,GAAcY,SAAzB;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useMemoCallback;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\n/**\n * Cache callback function that always return same ref instead.\n * This is used for context optimization.\n */\nfunction useMemoCallback(func) {\n  var funRef = React.useRef(func);\n  funRef.current = func;\n  var callback = React.useCallback(function () {\n    var _funRef$current;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (_funRef$current = funRef.current) === null || _funRef$current === void 0 ? void 0 : _funRef$current.call.apply(_funRef$current, [funRef].concat(args));\n  }, []);\n  return func ? callback : undefined;\n}"]},"metadata":{},"sourceType":"script"}