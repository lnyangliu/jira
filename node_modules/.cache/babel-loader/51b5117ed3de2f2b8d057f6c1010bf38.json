{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport qs from \"qs\";\nimport * as auth from \"auth-provider\";\nimport { useAuth } from \"context/auth-context\";\nconst apiUrl = process.env.REACT_APP_API_URL;\nexport const http = async (endpoint, {\n  data,\n  token,\n  headers,\n  ...customConfig\n} = {}) => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: token ? `bearer ${token}` : '',\n      'content-type': data ? 'application/json' : ''\n    },\n    ...customConfig\n  };\n\n  if (config.method.toUpperCase() === 'GET') {\n    endpoint += `?${qs.stringify(data)}`;\n  } else {\n    config.body = JSON.stringify(data || {});\n  }\n\n  return window.fetch(`${apiUrl}/${endpoint}`, config).then(async response => {\n    if (response.status === 401) {\n      await auth.logout();\n      window.location.reload();\n      return Promise.reject({\n        message: '请重新登录'\n      });\n    } else {\n      const data = await response.json();\n\n      if (response.ok) {\n        return data;\n      } else {\n        return Promise.reject(data);\n      }\n    }\n  });\n};\nexport const useHttp = () => {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  return (...[endpoint, config]) => http(endpoint, { ...config,\n    token: user === null || user === void 0 ? void 0 : user.token\n  });\n};\n\n_s(useHttp, \"7L471R5W2aZaZepAzUZB25Tbetc=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"sources":["/Users/liuyang/Documents/yideng/jira/src/utils/http.ts"],"names":["qs","auth","useAuth","apiUrl","process","env","REACT_APP_API_URL","http","endpoint","data","token","headers","customConfig","config","method","Authorization","toUpperCase","stringify","body","JSON","window","fetch","then","response","status","logout","location","reload","Promise","reject","message","json","ok","useHttp","user"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAO,KAAKC,IAAZ,MAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA3B;AAMA,OAAO,MAAMC,IAAI,GAAG,OAAOC,QAAP,EAAyB;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA,OAAd;AAAuB,KAAGC;AAA1B,IAAiD,EAA1E,KAAiF;AACjG,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXH,IAAAA,OAAO,EAAE;AACLI,MAAAA,aAAa,EAAEL,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EADtC;AAEL,sBAAgBD,IAAI,GAAG,kBAAH,GAAwB;AAFvC,KAFE;AAMX,OAAGG;AANQ,GAAf;;AAQA,MAAIC,MAAM,CAACC,MAAP,CAAcE,WAAd,OAAgC,KAApC,EAA2C;AACvCR,IAAAA,QAAQ,IAAK,IAAGR,EAAE,CAACiB,SAAH,CAAaR,IAAb,CAAmB,EAAnC;AACH,GAFD,MAEO;AACHI,IAAAA,MAAM,CAACK,IAAP,GAAcC,IAAI,CAACF,SAAL,CAAeR,IAAI,IAAI,EAAvB,CAAd;AACH;;AACD,SAAOW,MAAM,CAACC,KAAP,CAAc,GAAElB,MAAO,IAAGK,QAAS,EAAnC,EAAsCK,MAAtC,EACNS,IADM,CACD,MAAMC,QAAN,IAAkB;AACpB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAMvB,IAAI,CAACwB,MAAL,EAAN;AACAL,MAAAA,MAAM,CAACM,QAAP,CAAgBC,MAAhB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAe;AAACC,QAAAA,OAAO,EAAE;AAAV,OAAf,CAAP;AACH,KAJD,MAIO;AACH,YAAMrB,IAAI,GAAG,MAAMc,QAAQ,CAACQ,IAAT,EAAnB;;AACA,UAAIR,QAAQ,CAACS,EAAb,EAAiB;AACb,eAAOvB,IAAP;AACH,OAFD,MAEO;AACH,eAAOmB,OAAO,CAACC,MAAR,CAAepB,IAAf,CAAP;AACH;AACJ;AACJ,GAdM,CAAP;AAeH,CA7BM;AA+BP,OAAO,MAAMwB,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM;AAACC,IAAAA;AAAD,MAAShC,OAAO,EAAtB;AACA,SAAO,CAAC,GAAG,CAACM,QAAD,EAAWK,MAAX,CAAJ,KAAoDN,IAAI,CAACC,QAAD,EAAW,EAAC,GAAGK,MAAJ;AAAYH,IAAAA,KAAK,EAAEwB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAExB;AAAzB,GAAX,CAA/D;AACH,CAHM;;GAAMuB,O;UACM/B,O","sourcesContent":["import qs from \"qs\"\nimport * as auth from \"auth-provider\"\nimport { useAuth } from \"context/auth-context\"\n\nconst apiUrl = process.env.REACT_APP_API_URL\ninterface Config extends RequestInit{\n    token?: string,\n    data?: object\n}\n\nexport const http = async (endpoint: string, {data, token, headers, ...customConfig}:Config = {}) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            Authorization: token ? `bearer ${token}` : '',\n            'content-type': data ? 'application/json' : ''\n        },\n        ...customConfig\n    }\n    if (config.method.toUpperCase() === 'GET') {\n        endpoint += `?${qs.stringify(data)}`\n    } else {\n        config.body = JSON.stringify(data || {})\n    }\n    return window.fetch(`${apiUrl}/${endpoint}`, config)\n    .then(async response => {\n        if (response.status === 401) {\n            await auth.logout()\n            window.location.reload()\n            return Promise.reject({message: '请重新登录'})\n        } else {\n            const data = await response.json()\n            if (response.ok) {\n                return data\n            } else {\n                return Promise.reject(data)\n            }\n        }\n    })\n}\n\nexport const useHttp = () => {\n    const {user} = useAuth()\n    return (...[endpoint, config]: Parameters<typeof http>) => http(endpoint, {...config, token: user?.token})\n}"]},"metadata":{},"sourceType":"module"}