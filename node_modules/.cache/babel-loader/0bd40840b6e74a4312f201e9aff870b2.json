{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = InlineSubMenuList;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _rcMotion = _interopRequireDefault(require(\"rc-motion\"));\n\nvar _motionUtil = require(\"../utils/motionUtil\");\n\nvar _MenuContext = _interopRequireWildcard(require(\"../context/MenuContext\"));\n\nvar _SubMenuList = _interopRequireDefault(require(\"./SubMenuList\"));\n\nfunction InlineSubMenuList(_ref) {\n  var id = _ref.id,\n      open = _ref.open,\n      keyPath = _ref.keyPath,\n      children = _ref.children;\n  var fixedMode = 'inline';\n\n  var _React$useContext = React.useContext(_MenuContext.MenuContext),\n      prefixCls = _React$useContext.prefixCls,\n      forceSubMenuRender = _React$useContext.forceSubMenuRender,\n      motion = _React$useContext.motion,\n      defaultMotions = _React$useContext.defaultMotions,\n      mode = _React$useContext.mode; // Always use latest mode check\n\n\n  var sameModeRef = React.useRef(false);\n  sameModeRef.current = mode === fixedMode; // We record `destroy` mark here since when mode change from `inline` to others.\n  // The inline list should remove when motion end.\n\n  var _React$useState = React.useState(!sameModeRef.current),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      destroy = _React$useState2[0],\n      setDestroy = _React$useState2[1];\n\n  var mergedOpen = sameModeRef.current ? open : false; // ================================= Effect =================================\n  // Reset destroy state when mode change back\n\n  React.useEffect(function () {\n    if (sameModeRef.current) {\n      setDestroy(false);\n    }\n  }, [mode]); // ================================= Render =================================\n\n  var mergedMotion = (0, _objectSpread2.default)({}, (0, _motionUtil.getMotion)(fixedMode, motion, defaultMotions)); // No need appear since nest inlineCollapse changed\n\n  if (keyPath.length > 1) {\n    mergedMotion.motionAppear = false;\n  } // Hide inline list when mode changed and motion end\n\n\n  var originOnVisibleChanged = mergedMotion.onVisibleChanged;\n\n  mergedMotion.onVisibleChanged = function (newVisible) {\n    if (!sameModeRef.current && !newVisible) {\n      setDestroy(true);\n    }\n\n    return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);\n  };\n\n  if (destroy) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(_MenuContext.default, {\n    mode: fixedMode,\n    locked: !sameModeRef.current\n  }, /*#__PURE__*/React.createElement(_rcMotion.default, (0, _extends2.default)({\n    visible: mergedOpen\n  }, mergedMotion, {\n    forceRender: forceSubMenuRender,\n    removeOnLeave: false,\n    leavedClassName: \"\".concat(prefixCls, \"-hidden\")\n  }), function (_ref2) {\n    var motionClassName = _ref2.className,\n        motionStyle = _ref2.style;\n    return /*#__PURE__*/React.createElement(_SubMenuList.default, {\n      id: id,\n      className: motionClassName,\n      style: motionStyle\n    }, children);\n  }));\n}","map":{"version":3,"sources":["/Users/liuyang/Documents/yideng/jira/node_modules/rc-menu/lib/SubMenu/InlineSubMenuList.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","InlineSubMenuList","_extends2","_objectSpread2","_slicedToArray2","React","_rcMotion","_motionUtil","_MenuContext","_SubMenuList","_ref","id","open","keyPath","children","fixedMode","_React$useContext","useContext","MenuContext","prefixCls","forceSubMenuRender","motion","defaultMotions","mode","sameModeRef","useRef","current","_React$useState","useState","_React$useState2","destroy","setDestroy","mergedOpen","useEffect","mergedMotion","getMotion","length","motionAppear","originOnVisibleChanged","onVisibleChanged","newVisible","createElement","locked","visible","forceRender","removeOnLeave","leavedClassName","concat","_ref2","motionClassName","className","motionStyle","style"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = InlineSubMenuList;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _rcMotion = _interopRequireDefault(require(\"rc-motion\"));\n\nvar _motionUtil = require(\"../utils/motionUtil\");\n\nvar _MenuContext = _interopRequireWildcard(require(\"../context/MenuContext\"));\n\nvar _SubMenuList = _interopRequireDefault(require(\"./SubMenuList\"));\n\nfunction InlineSubMenuList(_ref) {\n  var id = _ref.id,\n      open = _ref.open,\n      keyPath = _ref.keyPath,\n      children = _ref.children;\n  var fixedMode = 'inline';\n\n  var _React$useContext = React.useContext(_MenuContext.MenuContext),\n      prefixCls = _React$useContext.prefixCls,\n      forceSubMenuRender = _React$useContext.forceSubMenuRender,\n      motion = _React$useContext.motion,\n      defaultMotions = _React$useContext.defaultMotions,\n      mode = _React$useContext.mode; // Always use latest mode check\n\n\n  var sameModeRef = React.useRef(false);\n  sameModeRef.current = mode === fixedMode; // We record `destroy` mark here since when mode change from `inline` to others.\n  // The inline list should remove when motion end.\n\n  var _React$useState = React.useState(!sameModeRef.current),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      destroy = _React$useState2[0],\n      setDestroy = _React$useState2[1];\n\n  var mergedOpen = sameModeRef.current ? open : false; // ================================= Effect =================================\n  // Reset destroy state when mode change back\n\n  React.useEffect(function () {\n    if (sameModeRef.current) {\n      setDestroy(false);\n    }\n  }, [mode]); // ================================= Render =================================\n\n  var mergedMotion = (0, _objectSpread2.default)({}, (0, _motionUtil.getMotion)(fixedMode, motion, defaultMotions)); // No need appear since nest inlineCollapse changed\n\n  if (keyPath.length > 1) {\n    mergedMotion.motionAppear = false;\n  } // Hide inline list when mode changed and motion end\n\n\n  var originOnVisibleChanged = mergedMotion.onVisibleChanged;\n\n  mergedMotion.onVisibleChanged = function (newVisible) {\n    if (!sameModeRef.current && !newVisible) {\n      setDestroy(true);\n    }\n\n    return originOnVisibleChanged === null || originOnVisibleChanged === void 0 ? void 0 : originOnVisibleChanged(newVisible);\n  };\n\n  if (destroy) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(_MenuContext.default, {\n    mode: fixedMode,\n    locked: !sameModeRef.current\n  }, /*#__PURE__*/React.createElement(_rcMotion.default, (0, _extends2.default)({\n    visible: mergedOpen\n  }, mergedMotion, {\n    forceRender: forceSubMenuRender,\n    removeOnLeave: false,\n    leavedClassName: \"\".concat(prefixCls, \"-hidden\")\n  }), function (_ref2) {\n    var motionClassName = _ref2.className,\n        motionStyle = _ref2.style;\n    return /*#__PURE__*/React.createElement(_SubMenuList.default, {\n      id: id,\n      className: motionClassName,\n      style: motionStyle\n    }, children);\n  }));\n}"]},"metadata":{},"sourceType":"script"}